<?php
/**
 * @file
 * The main module file for the stickynote module
 */

/*
 * goals for this module:
 * 1) custom display of notes
 * 2) notes follow  user, not node/entity
 * 3) admin or coach can access user notes and edit
 *    how to do this?
 *    a) user profile edit page
 *    b) portal user profile display page
 *    c) notes admin table list with edit link
 *
 */

/**
 * Implements hook_menu().
 */
function mor_stickynote_menu() {

  $items['mor-stickynote/add'] = array(
    'title' => 'Add Stickynote',
    'page callback' => 'mor_stickynote_add_page',
    'access arguments' => array('create stickynote'),
    'type' => MENU_CALLBACK,
  );
  $items['mor-stickynote/%stickynote/edit'] = array(
    'title' => 'Edit Stickynote',
    'page callback' => 'mor_stickynote_edit',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => '_stickynote_edit_access',
    'type' => MENU_CALLBACK,
  );
  $items['mor-stickynote/%stickynote/delete'] = array(
    'title' => 'Delete Stickynote',
    'page callback' => 'mor_stickynote_delete',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => '_stickynote_delete_access',
    'type' => MENU_CALLBACK,
  );
  $items['mor-stickynote/%stickynote/delete_confirm'] = array(
    'title' => 'Delete Stickynote',
    'page callback' => 'mor_stickynote_delete_confirm',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => '_stickynote_delete_access',
    'type' => MENU_CALLBACK,
  );
  $items['mor-stickynote/%stickynote/cancel'] = array(
    'title' => 'Cancel Delete Stickynote',
    'page callback' => 'mor_stickynote_cancel_delete',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => '_stickynote_delete_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function mor_stickynote_block_info() {
  $blocks = array();

  $blocks['mor_stickynote_block'] = array(
    'info' => t('MOR Stickynote block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mor_stickynote_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'mor_stickynote_block':
      if (user_access('view any stickynote') || user_access('view own stickynote') || user_access('administer stickynote')) {
        module_load_include('inc', 'mor_stickynote', 'includes/mor_stickynote.block');
        $block['subject'] = t('MOR Stickynotes');
        $block['content'] = mor_stickynote_block_contents();
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function mor_stickynote_theme($existing, $type, $theme, $path) {
  return array (
    'mor_stickynote_list' => array(
      'variables' => array('referring_url' => NULL, 'notes' => NULL,),
      'file' => 'theme/mor_stickynote.theme.inc',
    ),
    'mor_stickynote_confirm' => array(
      'variables' => array('stickynote' => NULL,),
      'file' => 'theme/mor_stickynote.theme.inc',
    ),
  );
}

/**
 * Stickynote add page callback function.
 */
function mor_stickynote_add_page() {
  $stickynote = (object)array (
    'snid' => '',
    'type' => 'stickynote',
    'note' => '',
    'url' => current_path(),
    'uid' => '',
  );

  return drupal_get_form('mor_stickynote_add_form', $stickynote);
}


function mor_stickynote_edit($stickynote) {
  $output = '<div id="add-edit-form">' . drupal_render(drupal_get_form('mor_stickynote_edit_form', $stickynote)) . '</div>';

  stickynote_rebuild_notes('#add-edit-form', $output);
}


/**
 * Returns notes based on user id in ref url or on logged in user
 */
function mor_stickynote_get_notes($referring_url = NULL) {
  $user_id = mor_stickynotes_get_user($referring_url);
  // Get all stickynotes of path and order by created date
  $query = db_select('stickynote', 's')
    ->condition('uid', $user_id)  // SYP: changed from nodeid to userid
    ->fields('s')
    ->orderBy('created', 'DESC');

  $notes = $query->execute();

  return $notes;
}

/*
 * Return user id based on ref_url argument
 */
function mor_stickynotes_get_user($ref_url = NULL) {
  global $user;
  $user_id = $user->uid;  // initially set id to logged in user
  // get user id from path if exists
  if ($ref_url) {
    $ref_url = explode('/',$ref_url); // parse url path
    if (is_numeric($ref_url[count($ref_url)-1])) {  // if last part of path is numeric then
      $idtemp = $ref_url[count($ref_url)-1];
      if ($user_obj = user_load($idtemp)) { // call user_load function to determine if this is an actual user
        $user_id = $idtemp;
      }
    }
  }
  return $user_id;
}

/**
 * Stickynote add submit function
 */
function mor_stickynote_add_form_submit($form, &$form_state) {
  global $user;
  $user_id = mor_stickynotes_get_user($form_state['referring_url']);
  if ($user_id != $user->uid) {
    // add user name to note
    $form_state['values']['note'] .= ' --'.$user->name;
  }
  // set variables and save submission
  $stickynote_submission = (object) $form_state['values'];
  $stickynote_submission->created = time();
  $stickynote_submission->updated = time();
  $stickynote_submission->url = $form_state['referring_url'];
  $stickynote_submission->uid = $user_id;
  field_attach_submit('stickynote', $stickynote_submission, $form, $form_state);
  $stickynote = stickynote_save($stickynote_submission);
}

/**
 * Stickynote edit submit function
 */
function mor_stickynote_edit_form_submit($form, &$form_state) {
  // get original stickynote and update fields
  $stickynote_submission = (object) $form_state['original_stickynote'];
  $stickynote_submission->note = $form_state['values']['note'];
  $stickynote_submission->updated = time();

  field_attach_submit('stickynote', $stickynote_submission, $form, $form_state);

  $stickynote = entity_get_controller('stickynote')->update($stickynote_submission);
}

/**
 * Implements hook_form().
 */
function mor_stickynote_add_form($form, &$form_state, $stickynote) {
  $stickynote_vars['referring_url'] = !empty($stickynote->url) ? $stickynote->url : current_path();
  $stickynote_vars['notes'] = mor_stickynote_get_notes($stickynote_vars['referring_url']);
  $form['notes_list'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="stickynote-list">',
    '#suffix' => '</div>',
    '#markup' => theme('mor_stickynote_list', $stickynote_vars),
  );

  // Only enable add note form for users with access.
  if (user_access('administer stickynote') || user_access('create stickynote')) {
    $access = FALSE;
  }
  else {
    $access = TRUE;
  }

  $form['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Add Note'),
    '#required' => TRUE,
    '#disabled' => $access,
    '#rows' => 5,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'mor_submit_note_add_callback',
      'wrapper' => 'stickynote-list',
      'name' => 'submit1',
    ),
    '#disabled' => $access,
    '#value' => t('Add Note'),
  );
  if ($form['notes_list']['#markup']) {
    $form['#attributes'] = array('class' => 'hidden');  // SYP: add hidden class if already contains stickynote(s)
  }
  $form_state['referring_url'] = $stickynote_vars['referring_url'];
  field_attach_form('stickynote', $stickynote, $form, $form_state);
  return $form;
}

/**
 * Implements hook_form().
 */
function mor_stickynote_edit_form($form, &$form_state, $stickynote) {

  $stickynote_vars['referring_url'] = !empty($stickynote->url) ? $stickynote->url : current_path();
  $stickynote_vars['notes'] = mor_stickynote_get_notes($stickynote_vars['referring_url']);

  $form['notes_list'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="stickynote-list">',
    '#suffix' => '</div>',
    '#markup' => theme('mor_stickynote_list', $stickynote_vars),
  );

  $form['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Edit Note'),
    '#required' => TRUE,
    '#default_value' => $stickynote->note,
    '#rows' => 5,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'mor_submit_note_edit_callback',
      'wrapper' => 'block-stickynote-stickynote-block',
      'name' => 'submit2',
    ),
    '#value' => t('Submit Change'),
  );
  $form['cancel'] = array(
    '#type' => 'button',
    '#ajax' => array(
      'callback' => 'mor_submit_note_edit_callback',
      'wrapper' => 'block-stickynote-stickynote-block',
      'name' => 'cancel',
    ),
    '#value' => t('Cancel'),
  );

  // Save the referring url and the original stickynote
  $form_state['referring_url'] = $stickynote->url;
  $form_state['original_stickynote'] = $stickynote;

  field_attach_form('stickynote', $stickynote, $form, $form_state);

  return $form;
}


/**
 * Add submit callback
 */
function mor_submit_note_add_callback($form, $form_state) {
  $stickynote_vars['referring_url'] = !empty($form_state['referring_url']) ? $form_state['referring_url'] : current_path();
  $stickynote_vars['notes'] = mor_stickynote_get_notes($stickynote_vars['referring_url']);

  // update list with new data
  $element = $form['notes_list'];
  $element['#markup'] = theme('mor_stickynote_list', $stickynote_vars);
  return $element;
}

/**
 * Edit submit callback
 */
function mor_submit_note_edit_callback($form, $form_state) {
  // repace add form with edit form
  $commands[] = ajax_command_replace('#mor-stickynote-edit-form', drupal_render(drupal_get_form('mor_stickynote_add_form', $form_state['original_stickynote'])));
  $page = array('#type' => 'ajax', '#commands' => $commands);
  return $page;
}


/**
 * Stickynote delete callback
 * @param $stickynote
 */
function mor_stickynote_delete($stickynote) {
  // delete stickynote record
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], $stickynote->snid)) {
    return drupal_access_denied();
  }
  entity_get_controller('stickynote')->delete($stickynote);
  $commands = array();
  $output = '<div id="add-edit-form">' . drupal_render(drupal_get_form('mor_stickynote_add_form', $stickynote)) . '</div>';

  stickynote_rebuild_notes('#add-edit-form', $output);
}

function mor_stickynote_cancel_delete($stickynote) {
  $output = '<div id="add-edit-form">' . drupal_render(drupal_get_form('mor_stickynote_add_form', $stickynote)) . '</div>';

  stickynote_rebuild_notes('#add-edit-form', $output);
}

/**
 * Stickynote confirm delete callback
 * @param $stickynote
 */
function mor_stickynote_delete_confirm($stickynote) {
  $confirm_form = theme('mor_stickynote_confirm', array('stickynote' => $stickynote));

  stickynote_rebuild_notes('.note-' . $stickynote->snid, $confirm_form);
}