<?php
/**
 * @file
 * module file for bulk comment delete
 * 1) admin form to trigger comment delete process
 * 2) comment delete function:
 *    a) query blog comments that contain links in them
 *    b) add ids to list of comments to delete
 *    c) run comment_delete function with list of ids as array
 *    d) limit each process to # of comments
 */

function bulk_comment_delete_menu() {
  $items['admin/config/system/bulk_comment_delete'] = array(
    'title' => 'Bulk Comment Delete',
    'description' => 'Run the bulk comment delete process',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_comment_delete_form'),
    'access arguments' => array('administer site configuration')
  );
  return $items;
}

function bulk_comment_delete_form($form, &$form_state) {
  $form['delete_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of comments to remove per process'),
    '#description' => t('Enter the number of comments to remove per process.'),
    '#size' => 10,
    '#default_value' => 10,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function bulk_comment_delete_form_submit($form, &$form_state) {
  /*
   * 1) run delete process
   * 2) generate message
   */
  $deleted_comments = bulk_delete_comments_process($form_state['values']['delete_amount']);
  $message = '@var1 spam comments deleted from the system';
  $variables = array('@var1' => $deleted_comments);
  drupal_set_message(t($message, $variables));
  watchdog('bulk_comment_delete', $message, $variables, WATCHDOG_NOTICE);
}

function bulk_delete_comments_process($limit = 10) {
  /*
   * 1) run db query for all comments containing links and limited to form field in argument
   */
  $ids = array();
  $count = 0;
  //$limit = $amount ? $form_state['values']['delete_amount'] : 10;
  $query = "SELECT * FROM {comment} c INNER JOIN {field_data_comment_body} cb ON c.cid = cb.entity_id 
    WHERE cb.comment_body_value REGEXP 'url=|viagra|http=' OR 
    c.subject NOT REGEXP '[A-Za-z0-9]' OR
    c.subject LIKE '%http%' OR c.mail LIKE '%.ru%' LIMIT ".$limit;
  $result = db_query($query);
  if ($result) {
    while ($row = $result->fetchAssoc()) {
      $count++;
      comment_delete($row['cid']);
    }
  }
  //dsm($ids);
  return $count;
}

function bulk_comment_delete_cron() {
  $deleted_comments = bulk_delete_comments_process(1000);
  $variables = array('@var1' => $deleted_comments);
  watchdog('bulk_comment_delete', '@var1 spam comments deleted from the system', $variables, WATCHDOG_NOTICE);
}

function bulk_comment_delete_setup_batch($number) {
  /*
   * batch setup process:
   * 1) break up delete process into X number of chunks;
   * 2) setup operations array to call function for each chunk
   * 3) put all info into batch array and set set batch finish function
   */

  // x / ? = 1000
  $chunks = $number > 1000 ? ceil($number/1000) : 1;
  $chunk_number = floor($number/$chunks);
  $operations = array();
  for($i = 0; $i < $chunks; $i++) {
    $operations[] = array('process_delete_chunk', array($chunk_number, t('(Performing @operation of @operation_total comment delete operations)', array('@operation' => $i, '@operation_total' => $chunks))));
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'bulk_comment_delete_batch_finished',
  );
  batch_set($batch);
  //return $batch;
  //Because we are doing this on the back-end, we set progressive to false.
  $batch['progressive'] = FALSE;

  //Start processing the batch operations.
  drush_backend_batch_process();
}

function process_delete_chunk($number, $operation_details, &$context) {
  /*
   * call delete process function, update context
   */
  $count = bulk_delete_comments_process($number);
  $context['message'] = $operation_details . ' - number deleted: '.$count;
}

function bulk_comment_delete_batch_finished($success, $results, $operations) {
  if ($success) {
    print(t('Finished delete process'));
  }
  else {
    print(t('An error occurred in process'));
  }
}