<?php

/**
 * Implements hook_entity_info().
 */
function keystone_habits_entity_info() {
  $info = array();
  $info['keystone_habit_week'] = array(
    'label' => t('Keystone Habit Weekly'),
    'base table' => 'keystone_habits_weekly',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'khid',
    ),
    'entity class' => 'KeystoneWeekEntity',
    'controller class' => 'KeystoneWeekEntityController',
    'access callback' => 'keystone_habits_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/content/keystone-habits/week',
      'controller class' => 'EntityDefaultUIController',
    ),
    'fieldable' => TRUE,
    'bundles' => array(
      'keystone_habit_week' => array(
        'label' => t('Keystone Habit Week'),
        'admin' => array(
          'path' => 'admin/content/keystone-habits/week',
        ),
      ),
    ),
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'keystone_habits',
  );

  $info['keystone_habit_day'] = array(
    'label' => t('Keystone Habit Daily'),
    'base table' => 'keystone_habits_daily',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'khid',
    ),
    'entity class' => 'KeystoneDayEntity',
    'controller class' => 'KeystoneDayEntityController',
    'access callback' => 'keystone_habits_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/content/keystone-habits/day',
      'controller class' => 'EntityDefaultUIController',
    ),
    'fieldable' => TRUE,
    'bundles' => array(
      'keystone_habit_day' => array(
        'label' => t('Keystone Habit Day'),
        'admin' => array(
          'path' => 'admin/content/keystone-habits/day',
        ),
      ),
    ),
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'keystone_habits',
  );
  
  return $info;
}

/**
 * Implements hook_menu()
 */
function keystone_habits_menu() {
  $items = array();
  
  $items['portal/program/keystone-habits-week'] = array(
    'title' => 'Keystone Habits Weekly',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'kh_week_list',
    'access arguments' => array('access content'),
  );
  $items['portal/program/keystone-habits/week/%'] = array(
    'title' => 'Keystone Habit',
    'page callback' => 'kh_week_view',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );
  $items['portal/program/keystone-habits/week/%/edit'] = array(
    'title' => 'Keystone Habit Edit',
    'page callback' => 'kh_week_edit',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );
  $items['portal/program/keystone-habits-day'] = array(
    'title' => 'Keystone Habits Day',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'kh_day_list',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Access callback for project entities.
 */
function keystone_habits_access_callback($op, $keystone_habit = NULL, $account = NULL) {
  if ($op == 'view' || $op == 'update' || $op == 'create' || $op == 'delete') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Callback function for page list display of kh week items
 */
function kh_week_list() {
  /**
   * 1) get all recent weekly entries
   * 2) starting with last (4 weeks? from start of program?) iterate through each week
   * 3) if entry matches week then display note, check, and edit link
   * 4) if not, then display add form
   */
  global $user;
  $output = '<div class="keystone-habits-list"><ul>';
  // 1) get all recent weekly entries
  $khquery = new EntityFieldQuery();
  $khqresult = $khquery
    ->entityCondition('entity_type', 'keystone_habit_week')
    ->propertyCondition('uid', $user->uid, '=')
    ->propertyOrderBy('practice_created', 'ASC')
    ->execute();
  if (isset($khqresult['keystone_habit_week'])) {
    $kh_keys = array_keys($khqresult['keystone_habit_week']);
    $khlist = entity_load('keystone_habit_week', $kh_keys);
    // 2) starting with last (4 weeks? from start of program?) iterate through each week
    for ($w=0; $w < 5; $w++) {
      $week = date('W',strtotime('-'.$w.' week'));
      $match = false;
      // foreach khlist>item if created_date matches week then list item with edit link
      // if not then list week with add link that prepopulates date for that week
      foreach ($khlist as $khitem) {
        $khweek = date('W',$khitem->practice_created);
        // 3) if entry matches week then display note, check, and edit link
        if ($khweek == $week) {
          $edit = l(t('edit entry'), 'admin/content/keystone-habits/week/manage/' . $khitem->khid);
          $output .= '<li>
            <div class="week">Week of '.$khweek.'</div>
            <div class="note"><label>Note:</label> '.$khitem->practice_note.'</div>
            <div class="edit">' . $edit .'</div>
            </li>';
          $match = true;
          break;
        }
      }
      // 4) if not, then display add form
      if (!$match) {
        $khentity = entity_create('keystone_habit_week', array('practice_created'=>strtotime('-'.$w.' week')));
        $form = entity_ui_get_form('keystone_habit_week', $khentity, 'add');
        //$form = entity_form('keystone_habit_week', $khentity);
        $output .= '<li>
          <div class="week"<label>Add entry for week of '.$week.'</label></div>
          <div class="form">'.drupal_render($form).'</div>
          </li>';
      }
    }
    drupal_set_title('Keystone Habits List');
    $output .= '</ul></div>';
  }
  return $output;
}

function kh_week_block_view() {
  /**
   * 1) query db for latest kh entry
   * 2) if matches current week then display as list
   * 3) if not then display add form
   */
  //$weekstart = date('D')!='Mon' ? date('Y-m-d',strtotime('last Monday')) : date('Y-m-d');
  //$weekfinish = date('D')!='Sun' ? date('Y-m-d',strtotime('next Sunday')) : date('Y-m-d');
  global $user;
  $currweek = date('W');
  // 1) query db for latest kh entry
  $khquery = new EntityFieldQuery();
  $khqresult = $khquery
    ->entityCondition('entity_type', 'keystone_habit_week')
    ->propertyCondition('uid', $user->uid, '=')
    ->propertyOrderBy('practice_created', 'DESC')
    ->range(0,1)
    ->execute();
  if (isset($khqresult['keystone_habit_week'])) {
    $kh_keys = array_keys($khqresult['keystone_habit_week']);
    $khitem = entity_load_single('keystone_habit_week', $kh_keys[0]);
    $khweek = date('W',$khitem->practice_created);
    // 2) if matches current week then display as list
    if ($khweek == $currweek) {
      $edit = l(t('edit entry'), 'admin/content/keystone-habits/week/manage/' . $khitem->khid);
      $output = '<div class="kh-week-entry">
        <div class="week">Current Week ('.$khweek.') has been entered</div>
        <div class="note"><label>Note:</label> '.$khitem->practice_note.'</div>
        <div class="edit">' . $edit .'</div>
        </div>';
    }
  }
  // 3) if not then display add form
  else {
    $khentity = entity_create('keystone_habit_week');
    $form = entity_ui_get_form('keystone_habit_week', $khentity, 'add');
    $output = '<div class="kh-week-entry-form">
          <div class="week">Add entry for current week ('.$currweek.')</div>
          <div class="form">'.drupal_render($form).'</div>
          </div>';
  }
  return $output;
}

function kh_day_list() {
  /**
   * 1) query last 2 weeks of entries
   * 2) iterate through each weekday for match
   * 3) if match then display entry (edit?)
   * 4) if no match then display form
   */
  $currday = date('w');
  $currweek = date('W');
  $output = '<div class="keystone-habits-list"><h2>Week of '.$currweek.'</h2><ul>';
  global $user;
  // 1) query last 2 weeks of entries
  $khquery = new EntityFieldQuery();
  $khqresult = $khquery
    ->entityCondition('entity_type', 'keystone_habit_day')
    ->propertyCondition('uid', $user->uid, '=')
    ->propertyOrderBy('practice_created', 'DESC')
    ->range(0,14)
    ->execute();
  if (isset($khqresult['keystone_habit_day'])) {
    $kh_keys = array_keys($khqresult['keystone_habit_day']);
    $khlist = entity_load('keystone_habit_day', $kh_keys);
    // 2) iterate through each weekday for match
    for ($d = 0; $d < 14; $d++) {
      $match = false;
      $tempdate = date('Y-m-d', strtotime('-'.$d.' day'));
      $tempday = date('w', strtotime('-'.$d.' day'));
      if ($tempday == 6) {
        $output .= '</ul></div>
            <div class="keystone-habits-list"><h2>Week of '.date('W',strtotime('-'.$d.' day')).'</h2><ul>';
      }
      foreach ($khlist as $khitem) {
        $khdate = date('Y-m-d',$khitem->practice_created);
        // 3) if match then display entry (edit?)
        if ($khdate == $tempdate) {
          $edit = l(t('edit entry'), 'admin/content/keystone-habits/day/manage/' . $khitem->khid);
          $output .= '<div class="kh-day-entry">
          <div class="day">Day of ('.$khdate.') has been entered</div>
          <div class="note"><label>Category:</label> '.$khitem->practice_category.'</div>
          <div class="edit">' . $edit .'</div>
          </div>';
          $match = true;
          break;
        }
      }
      // 4) if no match then display form
      if (!$match && $tempday > 0 && $tempday < 6) {
        $khentity = entity_create('keystone_habit_day', array('practice_created'=>strtotime('-'.$d.' day')));
        $form = entity_ui_get_form('keystone_habit_day', $khentity, 'add');
        $output .= '<li>
          <div class="week"<label>Add entry for day of '.$tempdate.'</label></div>
          <div class="form">'.drupal_render($form).'</div>
          </li>';
      }
    }
  }
  $output .= '</ul></div>';
  drupal_set_title('Keystone Habits Daily List');
  //$output = 'here is my output';
  return $output;
}

function kh_day_block_view() {
  /**
   * 1) query db for latest kh entry
   * 2) if matches current week then display as list
   * 3) if not then display add form
   */
  global $user;
  $currdate = date('Y-m-d');
  $currday = date('w');
  $output = '';
  // 1) query db for latest kh entry
  $khquery = new EntityFieldQuery();
  $khqresult = $khquery
    ->entityCondition('entity_type', 'keystone_habit_day')
    ->propertyCondition('uid', $user->uid, '=')
    ->propertyOrderBy('practice_created', 'DESC')
    ->range(0,1)
    ->execute();
  if (isset($khqresult['keystone_habit_day'])) {
    $kh_keys = array_keys($khqresult['keystone_habit_day']);
    $khitem = entity_load_single('keystone_habit_day', $kh_keys[0]);
    $khdate = date('Y-m-d',$khitem->practice_created);
    // 2) if matches current week then display as list
    if ($khdate == $currdate) {
      $edit = l(t('edit entry'), 'admin/content/keystone-habits/day/manage/' . $khitem->khid);
      $output = '<div class="kh-day-entry">
        <div class="day">Current day ('.$khdate.') has been entered</div>
        <div class="note"><label>Category:</label> '.$khitem->practice_category.'</div>
        <div class="edit">' . $edit .'</div>
        </div>';
    }
  }
  // 3) if not then display add form
  else {
    $khentity = entity_create('keystone_habit_day');
    $form = entity_ui_get_form('keystone_habit_day', $khentity, 'add');
    $output = '<div class="kh-week-entry-form">
          <div class="week">Add entry for current date ('.$currdate.')</div>
          <div class="form">'.drupal_render($form).'</div>
          </div>';
  }
  return $output;
}

function kh_week_edit($khid) {
  $khquery = new EntityFieldQuery();
  $khqresult = $khquery
    ->entityCondition('entity_type', 'keystone_habit_week')
    ->propertyCondition('khid', $khid, '=')
    ->execute();
  if (isset($khqresult['keystone_habit_week'])) {
    $kh_keys = array_keys($khqresult['keystone_habit_week']);
    $khlist = entity_load('keystone_habit_week', $kh_keys);
  }
  foreach ($khlist as $khitem) {
    $form = entity_ui_get_form('keystone_habit_week', $khitem);
  }
  $output = drupal_render($form);
  return $output;
}

/**
 * Callback function for displaying the individual kh page
 */
function kh_week_view($id) {
  
  $keystone_habits = entity_load('keystone_habit_week', array($id));
  $keystone_habit_week = $keystone_habits[$id];
  
  drupal_set_title($keystone_habit_week->practice_created);
  $output = entity_view('keystone_habit_week', array($keystone_habit_week));
  
  return $output;
  
}

/**
 * Form definition for adding / editing a project.
 */
function keystone_habit_week_form($form, &$form_state, $keystone_habit_week = NULL) {
  global $user;
  $form['uid'] = array(
    '#title' => t('User ID'),
    '#type' => 'hidden',
    '#default_value' => isset($keystone_habit_week->uid) ? $keystone_habit_week->uid : $user->uid,
    '#required' => TRUE,
  );

  $form['practice_note'] = array(
    '#title' => t('Note'),
    '#type' => 'textarea',
    '#default_value' => isset($keystone_habit_week->practice_note) ? $keystone_habit_week->practice_note : '',
    '#required' => FALSE,
  );

  $form['practice_created'] = array(
    '#title' => t('practice date'),
    '#type' => 'hidden',
    '#default_value' => isset($keystone_habit_week->practice_created) ? $keystone_habit_week->practice_created : strtotime('now'),
    '#required' => TRUE,
  );

  field_attach_form('keystone_habit_week', $keystone_habit_week, $form, $form_state);
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($keystone_habit_week->khid) ? t('Update') : t('Save'),
    '#weight' => 50,
  );

  return $form;
}

function keystone_habit_day_form($form, &$form_state, $keystone_habit_day = NULL) {
  global $user;
  $form['uid'] = array(
    '#title' => t('User ID'),
    '#type' => 'hidden',
    '#default_value' => isset($keystone_habit_day->uid) ? $keystone_habit_day->uid : $user->uid,
    '#required' => TRUE,
  );

  $form['practice_category'] = array(
    '#title' => t('practice category'),
    '#type' => 'select',
    '#options' => array(
      'Presence' => 'Presence - what you generate when you show up',
      'Delegation' => 'Delegation - developing greater capacity in your workgroup',
      'Building Relationships' => 'Building Relationships - extending your network',
    ),
    '#default_value' => isset($keystone_habit_day->practice_category) ? $keystone_habit_day->practice_category : '',
    '#required' => TRUE,
  );

  $form['practice_created'] = array(
    '#title' => t('practice date'),
    '#type' => 'hidden',
    '#default_value' => isset($keystone_habit_day->practice_created) ? $keystone_habit_day->practice_created : strtotime('now'),
    '#required' => TRUE,
  );

  field_attach_form('keystone_habit_day', $keystone_habit_day, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($keystone_habit_day->khid) ? t('Update') : t('Save'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Submit handler for the project add/edit form.
 */
function keystone_habit_week_form_submit($form, &$form_state) {
  $keystone_habit_week = entity_ui_form_submit_build_entity($form, $form_state);
  $keystone_habit_week->save();
  drupal_set_message(t('The keystone week habit has been saved.'));
  //$form_state['redirect'] = 'admin/keystone_habits';
}

function keystone_habit_day_form_submit($form, &$form_state) {
  $keystone_habit_day = entity_ui_form_submit_build_entity($form, $form_state);
  $keystone_habit_day->save();
  drupal_set_message(t('The keystone day habit has been saved.'));
  //$form_state['redirect'] = 'admin/keystone_habits';
}

/**
 * Implements hook_entity_property_info().
 */
function keystone_habits_entity_property_info() {
  
  $info = array();
  
  $info['keystone_habit_week']['properties']['khid'] = array(
    'label' => t('Keystone ID'),
    'description' => t('The ID of the Keystone Habit.'),
    'type' => 'integer',
    'schema field' => 'khid',
  );
  $info['keystone_habit_week']['properties']['practice_note'] = array(
    'label' => t('Keystone note'),
    'description' => t('Note.'),
    'type' => 'text',
    'schema field' => 'practice_note',
  );
  $info['keystone_habit_week']['properties']['practice_created'] = array(
    'label' => t('Practice Date'),
    'description' => t('Keystone practice date.'),
    'type' => 'date',
    'schema field' => 'practice_created',
  );

  $info['keystone_habit_day']['properties']['khid'] = array(
    'label' => t('Keystone ID'),
    'description' => t('The ID of the Keystone Habit.'),
    'type' => 'integer',
    'schema field' => 'khid',
  );
  $info['keystone_habit_day']['properties']['practice_category'] = array(
    'label' => t('practice_category'),
    'description' => t('practice category.'),
    'type' => 'text',
    'schema field' => 'practice_category',
  );
  $info['keystone_habit_day']['properties']['practice_created'] = array(
    'label' => t('Practice Date'),
    'description' => t('Keystone practice date.'),
    'type' => 'date',
    'schema field' => 'practice_created',
  );
  
  return $info;
}



/**
 * Extending the EntityAPIController for the Project entity.
 */
class KeystoneWeekEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);

    // Our additions to the $build render array.
    $build['note'] = array(
      '#type' => 'markup',
      '#markup' => check_plain($entity->practice_note),
      '#prefix' => '<div class="note">',
      '#suffix' => '</div>',
    );
    $build['practice_created'] = array(
      '#type' => 'markup',
      '#markup' => format_date($entity->practice_created,'medium'),
      '#prefix' => '<p>Practice Date: ',
      '#suffix' => '</p>',
    );

    return $build;

  }

}

class KeystoneDayEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);

    // Our additions to the $build render array.
    $build['practice_category'] = array(
      '#type' => 'markup',
      '#markup' => check_plain($entity->practice_category),
      '#prefix' => '<div class="practice-category">',
      '#suffix' => '</div>',
    );
    $build['practice_created'] = array(
      '#type' => 'markup',
      '#markup' => strtotime($entity->practice_created),
      '#prefix' => '<p>Practice Date: ',
      '#suffix' => '</p>',
    );

    return $build;

  }

}

/**
 * KH block - hook_block_info
 * declares which blocks are provided by module
 */
function keystone_habits_block_info() {
  $blocks['kh_weekly_block'] = array(
    'info' => t('Keystone Habits Weekly block'),
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
    'region' => 'navigation',
  );
  $blocks['kh_daily_block'] = array(
    'info' => t('Keystone Habits Daily block'),
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
    'region' => 'navigation',
  );
  return $blocks;
}

/**
 * KH block view - hook_block_view
 * generate content of each block
 */
function keystone_habits_block_view($delta = '') {
  switch ($delta) {
    case 'kh_weekly_block':
      $output = '<p>Track your weekly keystone habit. <br />
        <a href="/portal/program/keystone-habits-week">Click here</a> to view recent past weekly entries.</p>'
        .kh_week_block_view();
      $block['subject'] = t('Keystone Weekly Habits');
      $block['content'] = $output;	// now render the damn thing
      break;
    case 'kh_daily_block':
      $output = '<p>Track your daily keystone habit. <br />
        <a href="/portal/program/keystone-habits-day">Click here</a> to view recent past daily entries.</p>'
        .kh_day_block_view();
      $block['subject'] = t('Keystone Daily Habits');
      $block['content'] = $output;	// now render the damn thing
      break;
  }
  return $block;
}

/**
 * Project entity class extending the Entity class
 */
class KeystoneWeekEntity extends Entity {

  protected function defaultLabel() {
    //var_dump($this);
    $labeltemp = isset($this->practice_created) ? 'Weekly Practice for week '.date('W',$this->practice_created) : '';
    return $labeltemp;
  }

  /**
   * Change the default URI from default/id to project/id
   */
  protected function defaultUri() {
    return array('path' => 'keystone_habits/week/' . $this->identifier());
  }
  
}

class KeystoneDayEntity extends Entity {

  protected function defaultLabel() {
    $labeltemp = isset($this->practice_created) ? 'Daily Practice for '.date('Y-m-d',$this->practice_created) : '';
    return $labeltemp;
  }

  /**
   * Change the default URI from default/id to project/id
   */
  protected function defaultUri() {
    return array('path' => 'keystone_habits/day' . $this->identifier());
  }

}
